<?xml version="1.0"?>
<configuration>

  <property>
    <description>The hostname of the RM.</description>
    <name>yarn.resourcemanager.hostname</name>
    <value>wally001.cit.tu-berlin.de</value>
  </property>

  <!-- cgroups -->
  <property>
    <name>yarn.nodemanager.resource.percentage-physical-cpu-limit</name>
    <value>100</value>
    <description>
      Percentage of CPU that can be allocated for containers.
      This setting allows users to limit the amount of CPU that YARN containers use.
      Currently functional only on Linux using cgroups.
      The default is to use 100% of CPU.
    </description>
  </property>
  <property>
    <name>yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage</name>
    <value>true</value>
    <description>
      CGroups allows cpu usage limits to be hard or soft.
      When this setting is true, containers cannot use more CPU usage than allocated even if spare CPU is available.
      This ensures that containers can only use CPU that they were allocated.
      When set to false, containers can use spare CPU if available.
      It should be noted that irrespective of whether set to true or false,
      at no time can the combined CPU usage of all containers exceed the value specified
      in “yarn.nodemanager.resource.percentage-physical-cpu-limit”.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.resource.memory.enabled</name>
    <value>true</value>
    <description>enable cgroups mem handling</description>
  </property>
  <property>
    <name>yarn.nodemanager.pmem-check-enabled</name>
    <value>false</value>
  </property>
  <property>
    <name>yarn.nodemanager.vmem-check-enabled</name>
    <value>false</value>
  </property>

<!-- resource allocation -->
  <property>
    <description>Minimum limit of memory to allocate to each container request at the Resource Manager.</description>
    <name>yarn.scheduler.minimum-allocation-mb</name>
    <value>512</value>
  </property>
  <property>
    <description>Maximum limit of memory to allocate to each container request at the Resource Manager.</description>
    <name>yarn.scheduler.maximum-allocation-mb</name>
    <value>1024</value>  <!-- mem per container -->
  </property>

  <property>
    <description>The minimum allocation for every container request at the RM, in terms of virtual CPU cores. Requests lower than this won't take effect, and the specified value will get allocated the minimum.</description>
    <name>yarn.scheduler.minimum-allocation-vcores</name>
    <value>1</value>
  </property>
  <property>
    <description>The maximum allocation for every container request at the RM, in terms of virtual CPU cores. Requests higher than this won't take effect, and will get capped to this value.</description>
    <name>yarn.scheduler.maximum-allocation-vcores</name>
    <value>7</value>
  </property>

  <property>
    <description>Physical memory, in MB, to be made available to running containers</description>
    <name>yarn.nodemanager.resource.memory-mb</name>
    <value>14336</value> <!-- 13GiB mem per node -->
  </property>
  <property>
    <description>Number of CPU cores that can be allocated for containers.</description>
    <name>yarn.nodemanager.resource.cpu-vcores</name>
    <value>7</value>  <!-- usable cores total??? -->
  </property>

  <!-- https://stackoverflow.com/questions/14110428/am-container-is-running-beyond-virtual-memory-limits -->
<!--
  <property>
    <description>Ratio between virtual memory to physical memory when setting memory limits for containers. Container allocations are expressed in terms of physical memory, and virtual memory usage is allowed to exceed this allocation by this ratio.</description>
    <name>yarn.nodemanager.vmem-pmem-ratio</name>
    <value>3</value>
  </property>
-->

<!-- linux container executor -->
  <property>
    <description>who will execute(launch) the containers.</description>
    <name>yarn.nodemanager.container-executor.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor</value>
  </property>
  <property>
    <description>The class which should help the LCE handle resources.</description>
    <name>yarn.nodemanager.linux-container-executor.resources-handler.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.util.CgroupsLCEResourcesHandler</value>
  </property>
  <property>
    <description>The cgroups hierarchy under which to place YARN proccesses (cannot contain commas).
    If yarn.nodemanager.linux-container-executor.cgroups.mount is false (that is, if cgroups have
    been pre-configured), then this cgroups hierarchy must already exist and be writable by the
    NodeManager user, otherwise the NodeManager may fail.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler.</description>
    <name>yarn.nodemanager.linux-container-executor.cgroups.hierarchy</name>
    <value>/hadoop-yarn</value>
  </property>
  <property>
    <description>Whether the LCE should attempt to mount cgroups if not found.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler.</description>
    <name>yarn.nodemanager.linux-container-executor.cgroups.mount</name>
    <value>true</value>
  </property>
  <property>
    <description>Where the LCE should attempt to mount cgroups if not found. Common locations
    include /sys/fs/cgroup and /cgroup; the default location can vary depending on the Linux
    distribution in use. This path must exist before the NodeManager is launched.
    Only used when the LCE resources handler is set to the CgroupsLCEResourcesHandler, and
    yarn.nodemanager.linux-container-executor.cgroups.mount is true.</description>
    <name>yarn.nodemanager.linux-container-executor.cgroups.mount-path</name>
    <value>/sys/fs/cgroup</value>
  </property>
  <property>
    <description>user group that the YARN users will run under (e.g. hadoop). should match container-executor.cfg</description>
    <name>yarn.nodemanager.linux-container-executor.group</name>
    <value>ldapusers</value>
  </property>
  <property>
    <description>This determines which of the two modes that LCE should use on a non-secure cluster. If this value is set to true, then all containers will be launched as the user specified in yarn.nodemanager.linux-container-executor.nonsecure-mode.local-user (default is "nobody"). If this value is set to false, then containers will run as the user who submitted the application.</description>
    <name>yarn.nodemanager.linux-container-executor.nonsecure-mode.limit-users</name>
    <value>false</value>
  </property>

  <property>
      <name>yarn.nodemanager.local-dirs</name>
      <value>/data/bbdc/hadoop/local-dirs</value>
  </property>
  <property>
      <name>yarn.nodemanager.log-dirs</name>
      <value>/data/bbdc/hadoop/log-dirs</value>
  </property>

  <property>
      <name>yarn.log-aggregation-enable</name>
      <value>true</value>
  </property>
  <property>
      <name>yarn.log-aggregation.retain-seconds</name>
      <value>3600</value>
  </property>

</configuration>
